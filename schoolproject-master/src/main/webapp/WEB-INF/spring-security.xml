<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Just for testing... -->
	<!-- <http pattern="/oauth/cache_approvals" security="none" xmlns="http://www.springframework.org/schema/security" 
		/> <http pattern="/oauth/uncache_approvals" security="none" xmlns="http://www.springframework.org/schema/security" 
		/> -->

	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behaviour. -->
	<http pattern="/user/**" create-session="never" use-expressions="true"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous />
		<intercept-url pattern="/user/login" access="isAnonymous()" />
		<intercept-url pattern="/user/changeUserPassword"
			access="isAnonymous()" />
		<intercept-url pattern="/user/valid" access="isAnonymous()" />
		<intercept-url pattern="/user/userForgotPassword"
			access="isAnonymous()" />
		<intercept-url pattern="/user/auth/facebook" access="isAnonymous()" />
		<intercept-url pattern="/user/registerNewUser" access="isAnonymous()" />
		<intercept-url pattern="/user/registerConfirm" access="isAnonymous()" />
		<intercept-url pattern="/user/**" access="hasRole('ROLE_USER')" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/hotel/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager" use-expressions="true"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous />
		<intercept-url pattern="/hotel/getData"
			access="isAnonymous() or hasRole('ROLE_USER')" />
		<intercept-url pattern="/hotel/getRoomSuggesion"
			access="isAnonymous() or hasRole('ROLE_USER')" />
		<intercept-url pattern="/hotel/getRoomFacility"
			access="isAnonymous() or hasRole('ROLE_USER')" />
		<intercept-url pattern="/hotel/getCityName"
			access="isAnonymous() or hasRole('ROLE_USER')" />
		<intercept-url pattern="/hotel/getHotelData/*"
			access="isAnonymous() or hasRole('ROLE_USER')" />
		<intercept-url pattern="/hotel/**" access="hasRole('ROLE_USER')" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/userLogout" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/userLogout" method="GET" />
		<sec:logout invalidate-session="true" logout-url="/userLogout"
			success-handler-ref="logoutSuccessHandler" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<bean id="logoutSuccessHandler" class="com.arcsapt.sms.security.LogoutImpl">
		<property name="tokenstore" ref="tokenStore"></property>
	</bean>

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="test" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="test/client" />
		<property name="typeName" value="Basic" />
	</bean>
	<sec:debug />
	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<!-- <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" 
					/> <bean class="org.springframework.security.access.vote.RoleVoter" /> <bean 
					class="org.springframework.security.access.vote.AuthenticatedVoter" /> -->
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
				<bean
					class="org.springframework.security.web.access.expression.WebExpressionVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<authentication-manager alias="authenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<!-- <authentication-provider> <user-service id="userDetailsService"> <user 
			name="demo" password="demo" authorities="ROLE_USER" /> <user name="HR" password="HR" 
			authorities="ROLE_USER" /> </user-service> </authentication-provider> -->
		<authentication-provider ref="customUserAuthenticationProvider">
		</authentication-provider>
	</authentication-manager>

	<bean id="customUserAuthenticationProvider"
		class="com.arcsapt.sms.security.CustomUserAuthenticationProvider">
	</bean>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<!-- Used for the persistenceof tokens (currently an in memory implementation) -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<!-- Used to create token and and every thing about them except for their 
		persistence that is reposibility of TokenStore (Given here is a default implementation) -->
	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
	</bean>

	<!-- authorization-server aka AuthorizationServerTokenServices is an interface 
		that defines everything necessary for token management -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter"
		resource-id="test" token-services-ref="tokenServices" />
	<!-- ClientsDeailsService: Entry Point to clients database (given is in 
		memory implementation) -->
	<!-- <oauth:client-details-service id="clientDetails"> client <oauth:client 
		client-id="demo" authorized-grant-types="authorization_code,client_credentials" 
		authorities="ROLE_USER" scope="read,write,trust" secret="demo" /> <oauth:client 
		client-id="HR" authorized-grant-types="password,authorization_code,refresh_token,implicit" 
		secret="HR" authorities="ROLE_USER" /> </oauth:client-details-service> -->

	<bean id="clientDetails" class="com.arcsapt.sms.security.ClientDetailsServiceImpl" />

	<sec:global-method-security
		pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the 
			http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans>